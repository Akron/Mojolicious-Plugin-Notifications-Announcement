=pod

=encoding utf8

=head1 NAME

Mojolicious::Plugin::Notifications::Announcement - Frontend Service Announcements


=head1 SYNOPSIS

  # In Mojolicious Lite
  plugin 'Notifications::Announcement' => [{
    msg => 'We have a new feature, <%= stash 'user_name' %>!'
  }];

  # Check if announcement was already read
  callback check_announcement => sub {
    my ($c, $ann) = @_;
    return 1 if $c->session('read-' . $ann->{id});
    return;
  };

  # Confirm that the announcement was read
  hook after_announcement_ok => sub {
    my ($c, $ann) = @_;
    $c->session('read-' . $ann->{id} => 1);
  }

  # In templates
  %= notifications 'Alertify'

=head1 DESCRIPTION

L<Mojolicious::Plugin::Notifications::Announcement> uses
L<Mojolicious::Plugin::Notifications> to present service announcements
to users with specific requirements, e.g. confirmation or to be seen only once.

B<WARNING: This module is still in early development - don't use it for now!>


=head1 METHODS

=head2 register

  # Mojolicious
  $app->plugin('Notifications::Announcement' => [
    {
      msg => 'We have a new feature, <%= stash 'user_name' %>!'
    },
    {
      msg => 'We have updated our privacy policy!',
      type => 'confirm'
    }
  ]);

Called when registering the plugin.

Accepts an optional array of announcements, that at least require a C<msg>
field, that is treated as an inline L<Mojo::Template>.

Announcements can be set as part of the configuration
file with the key C<Notifications-Announcement> or on registration
(that will be merged with the announcement list from the configuration).

Announcements are ensured to have a valid C<id> information as well.
If not set, it will be added as a checksum of all announcement attributes.

Further attributes can be set and will be passed to the callbacks.
The C<type> attribute will be used as the notification type to
L<Mojolicious::Plugin::Notifications/notify> and defaults to C<announce>.

In case the type is C<confirm>, confirmation routes will be established.


=head1 CALLBACKS

=head2 check_announcement

  app->callback(
    check_announcement => sub {
      my ($c, $ann) = @_;
      return 1 if $c->session('n!' . $ann->{id});
      return;
    });

This callback is released to check if an announcement should
be served or not. Expects a positive
return value, if the announcement should not be served
(e.g. because it already was served to the user),
otherwise it is send.
Passes the current controller and the announcement object
with all parameters, at least C<msg> and C<id>.


=head1 HOOKS

=head2 after_announcement_ok

  app->hook(
    after_announcement_ok => sub {
      my ($c, $ann) = @_;
      $c->session('n!' . $ann->{id} => 1);
    });

This hook is run after an announcement was accepted,
that is either served or confirmed if required.
Passes the current controller and the announcement object
with all parameters, at least C<msg> and C<id>.


=head2 after_announcement_cancel

  app->hook(
    after_announcement_cancel => sub {
      my ($c, $ann) = @_;
      $c->session('n!' . $ann->{id} => 1);
    });

This hook is run after an announcement was canceled
in case confirmation is required.
Passes the current controller and the announcement object
with all parameters, at least C<msg> and C<id>.


=head1 SHORTCUT

=head2 announcements

  # In Mojolicious::Lite
  post('/confirm/ok')->announcements('ok');
  post('/confirm/cancel')->announcements('cancel');

Establish announcement routes for confirmation
and cancellation of announcements requiring confirmation.
Accepts the route type as a string parameter
(either C<ok> or C<cancel>).

The shortcut requires routes that accept the C<POST> method.


=head1 DEPENDENCIES

L<Mojolicious>, L<Mojolicious::Plugin::Util::Callback>,
L<Mojolicious::Plugin::Notifications>.


=head1 AVAILABILITY

  https://github.com/Akron/Mojolicious-Plugin-Notifications-Announcement


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2018, L<Nils Diewald|https://nils-diewald.de/>.

L<Mojolicious::Plugin::Notifications::Announcement> is developed as
part of the L<KorAP|https://korap.ids-mannheim.de/>
Corpus Analysis Platform at the
L<Institute for the German Language (IDS)|http://ids-mannheim.de/>,
member of the
L<Leibniz-Gemeinschaft|http://www.leibniz-gemeinschaft.de/en/about-us/leibniz-competition/projekte-2011/2011-funding-line-2/>.

This program is free software, you can redistribute it
and/or modify it under the terms of the Artistic License version 2.0.

=cut
